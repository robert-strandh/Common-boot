(cl:in-package #:common-boot-ast-to-hir)

(defun simplify-ast (ast)
  (let* ((ast (iat:macrolet-to-locally ast))
         (ast (iat:lexify-lambda-list ast))
         (ast (iat:split-let-or-let* ast))
         (ast (iat:replace-special-let-with-bind ast))
         (ast (iat:let-to-labels ast))
         (ast (iat:flet-to-labels ast))
         (ast (iat:split-setq ast))
         (ast (iat:inline-inlinable-functions ast))
         (ast (iat:remove-degenerate-labels ast))
         (ast (iat:assignment-conversion ast))
         (ast (iat:convert-block ast))
         (ast (iat:remove-unused-blocks ast))
         (ast (iat:convert-tagbody ast))
         (ast (iat:transform-function-definition-and-reference ast))
         (ast (iat:eliminate-function ast))
         (ast (iat:closure-conversion ast))
         (ast (iat:replace-trivial-locally-by-progn ast))
         (ast (iat:eliminate-trivial-progn ast)))
    ast))

;;; The AST is the result of calling COMMON-BOOT:CST-TO-AST.
(defun ast-to-hir (client ast)
  (let ((simplified-ast (simplify-ast ast)))
    (translate client simplified-ast)))
